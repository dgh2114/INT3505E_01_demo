openapi: 3.0.3
info:
  title: Book Management API
  version: 1.0.0
  description: |
    A simple RESTful API for managing books.
    Demonstrates core REST principles and common patterns.
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:5000
    description: Local dev server
tags:
  - name: Books
    description: Manage books
  - name: Borrow
    description: Borrowing operations
paths:
  /books:
    get:
      tags: [Books]
      summary: List all books
      operationId: listBooks
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Search by title substring
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  total:
                    type: integer
                    example: 2
              examples:
                example:
                  value:
                    items:
                      - id: 1
                        title: "SOA - Kien truc huong dich vu"
                        available: true
                      - id: 2
                        title: "Thu vien muon - tra sach"
                        available: false
                    total: 2
    post:
      tags: [Books]
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreate'
            examples:
              example:
                value:
                  title: "Clean Architecture"
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
  /books/{id}:
    get:
      tags: [Books]
      summary: Get a book by ID
      operationId: getBook
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Books]
      summary: Update a book
      operationId: updateBook
      parameters:
        - $ref: '#/components/parameters/BookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdate'
            examples:
              example:
                value:
                  title: "New title"
                  available: false
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Books]
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/NotFound'
  /books/{id}/borrow:
    post:
      tags: [Borrow]
      summary: Borrow a book
      operationId: borrowBook
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/BookId'
      requestBody:
        required: false
      responses:
        '200':
          description: Borrowed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Borrowed 'SOA - Kien truc huong dich vu' successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    BookId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        minimum: 1
      description: Book identifier
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                error: Bad Request
                details: Invalid payload
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                error: Not Found
                details: Book not found
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example:
              value:
                error: Unauthorized
                details: Missing or invalid token
  schemas:
    Book:
      type: object
      required: [id, title, available]
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "SOA - Kien truc huong dich vu"
        available:
          type: boolean
          example: true
    BookCreate:
      type: object
      required: [title]
      properties:
        title:
          type: string
          minLength: 1
          example: "Designing Data-Intensive Applications"
    BookUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        available:
          type: boolean
    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: string
